{"ast":null,"code":"var _jsxFileName = \"D:\\\\stopwatch\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { timer, concat, NEVER, of, fromEvent } from 'rxjs';\nimport { scan, tap, filter, switchMap } from 'rxjs/operators';\nimport { emitKeypressEvents } from 'readline';\nimport DisplayComponent from './Components/display/DisplayComponent';\nimport BtnComponent from './Components/btn/BtnComponent';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [time, setTime] = useState({\n    s: 0,\n    m: 0,\n    h: 0\n  });\n  const [interv, setInterv] = useState();\n  const start = of(false);\n  concat(starter$, pauser$).pipe(switchMap(stopped => stopped ? NEVER : timer(0, 1000)), scan(acc => acc + 1, 0)).subscribe(console.log);\n  let updatedS = time.s,\n      updatedM = time.m,\n      updatedH = time.h;\n\n  const run = () => {\n    if (updatedM === 60) {\n      updatedH++;\n      updatedM = 0;\n    }\n\n    if (updatedS === 60) {\n      updatedM++;\n      updatedS = 0;\n    }\n\n    updatedS++;\n    return setTime({\n      s: updatedS,\n      m: updatedM,\n      h: updatedH\n    });\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setTime({\n      s: 0,\n      m: 0,\n      h: 0\n    });\n  };\n\n  const wait = () => {\n    clearInterval(interv);\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setTime({\n      s: 0,\n      m: 0,\n      h: 0\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-holder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stopwatch\",\n        children: [/*#__PURE__*/_jsxDEV(DisplayComponent, {\n          time: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(BtnComponent, {\n          reset: reset,\n          stop: stop,\n          start: start,\n          wait: wait\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hGssWi5J9jvb/GsYNy+KnliXRJE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/stopwatch/src/App.js"],"names":["React","useState","timer","concat","NEVER","of","fromEvent","scan","tap","filter","switchMap","emitKeypressEvents","DisplayComponent","BtnComponent","App","time","setTime","s","m","h","interv","setInterv","start","starter$","pauser$","pipe","stopped","acc","subscribe","console","log","updatedS","updatedM","updatedH","run","stop","clearInterval","wait","reset"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { timer, concat, NEVER, of, fromEvent } from 'rxjs';\nimport { scan, tap, filter, switchMap } from 'rxjs/operators';\nimport { emitKeypressEvents } from 'readline'\nimport DisplayComponent from './Components/display/DisplayComponent';\nimport BtnComponent from './Components/btn/BtnComponent';\nimport './App.css';\n\nfunction App() {\n  const [time, setTime] = useState({ s:0, m:0, h:0});\n  const [interv, setInterv] = useState();\n  \n  const start = of(false);\n  concat(starter$, pauser$)\n  .pipe(\n    switchMap(stopped => (stopped ? NEVER : timer(0, 1000))),\n    scan(acc => acc + 1, 0),\n  )\n  .subscribe(console.log);\n\n  let updatedS = time.s, \n      updatedM = time.m, \n      updatedH = time.h;\n\n  const run = () => {\n    if(updatedM === 60){\n      updatedH++;\n      updatedM = 0;\n    }\n    if(updatedS === 60){\n      updatedM++;\n      updatedS = 0;\n    }\n    \n    updatedS++;\n    return setTime({ s:updatedS, m:updatedM, h:updatedH});\n  };\n\n  const stop = () => {\n    clearInterval(interv);\n    setTime({ s:0, m:0, h:0})\n    \n  };\n\n  const wait = () => {\n    clearInterval(interv);\n    \n    \n  };\n\n  const reset = () =>{\n    clearInterval(interv);\n    setTime({ s:0, m:0, h:0});\n  }\n \n  return (\n    <div className=\"main-section\">\n     <div className=\"clock-holder\">\n          <div className=\"stopwatch\">\n               <DisplayComponent time={time}/>\n               <BtnComponent   reset={reset} stop={stop} start={start} wait={wait}/>\n          </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}