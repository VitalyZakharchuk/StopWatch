{"ast":null,"code":"var _jsxFileName = \"D:\\\\stopwatch\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { timer, concat, NEVER, of, fromEvent } from 'rxjs';\nimport { scan, tap, filter, switchMap } from 'rxjs/operators';\nimport { emitKeypressEvents } from 'readline';\nimport DisplayComponent from './Components/display/DisplayComponent';\nimport BtnComponent from './Components/btn/BtnComponent';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [time, setTime] = useState({\n    s: 0,\n    m: 0,\n    h: 0\n  });\n  const [interv, setInterv] = useState();\n  process.stdin.setRawMode(true);\n  emitKeypressEvents(process.stdin);\n  const keypresses$ = fromEvent(process.stdin, 'keypress', (_, key) => key);\n  const pauser$ = keypresses$.pipe(tap(key => {\n    if (key && key.ctrl && key.name == 'c') {\n      process.exit(0);\n    }\n  }), filter(key => key.name === 'p'), scan(acc => !acc, false));\n  const starter$ = of(false);\n  concat(starter$, pauser$).pipe(switchMap(stopped => stopped ? NEVER : timer(0, 1000)), scan(acc => acc + 1, 0)).subscribe(console.log);\n\n  const stop = () => {\n    clearInterval(interv);\n    setTime({\n      s: 0,\n      m: 0,\n      h: 0\n    });\n  };\n\n  const wait = () => {\n    clearInterval(interv);\n  };\n\n  const reset = () => {\n    clearInterval(interv);\n    setTime({\n      s: 0,\n      m: 0,\n      h: 0\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clock-holder\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stopwatch\",\n        children: [/*#__PURE__*/_jsxDEV(DisplayComponent, {\n          time: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(BtnComponent, {\n          reset: reset,\n          stop: stop,\n          start: starter$,\n          wait: wait\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hGssWi5J9jvb/GsYNy+KnliXRJE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/stopwatch/src/App.js"],"names":["React","useState","timer","concat","NEVER","of","fromEvent","scan","tap","filter","switchMap","emitKeypressEvents","DisplayComponent","BtnComponent","App","time","setTime","s","m","h","interv","setInterv","process","stdin","setRawMode","keypresses$","_","key","pauser$","pipe","ctrl","name","exit","acc","starter$","stopped","subscribe","console","log","stop","clearInterval","wait","reset"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { timer, concat, NEVER, of, fromEvent } from 'rxjs';\nimport { scan, tap, filter, switchMap } from 'rxjs/operators';\nimport { emitKeypressEvents } from 'readline'\nimport DisplayComponent from './Components/display/DisplayComponent';\nimport BtnComponent from './Components/btn/BtnComponent';\nimport './App.css';\n\nfunction App() {\n  const [time, setTime] = useState({ s:0, m:0, h:0});\n  const [interv, setInterv] = useState();\n  \n  process.stdin.setRawMode(true);\n  emitKeypressEvents(process.stdin);\n  \n  const keypresses$ = fromEvent(process.stdin, 'keypress', (_, key) => key);\n  const pauser$ = keypresses$.pipe(\n    tap(key => {\n      if (key && key.ctrl && key.name == 'c') {\n        process.exit(0);\n      }\n    }),\n    filter(key => key.name === 'p'),\n    scan(acc => !acc, false),\n  );\n  \n  const starter$ = of(false);\n  concat(starter$, pauser$)\n    .pipe(\n      switchMap(stopped => (stopped ? NEVER : timer(0, 1000))),\n      scan(acc => acc + 1, 0),\n    )\n    .subscribe(console.log);\n\n  const stop = () => {\n    clearInterval(interv);\n    setTime({ s:0, m:0, h:0})\n    \n  };\n\n  const wait = () => {\n    clearInterval(interv);\n    \n    \n  };\n\n  const reset = () =>{\n    clearInterval(interv);\n    setTime({ s:0, m:0, h:0});\n  }\n \n  return (\n    <div className=\"main-section\">\n     <div className=\"clock-holder\">\n          <div className=\"stopwatch\">\n               <DisplayComponent time={time}/>\n               <BtnComponent   reset={reset} stop={stop} start={starter$} wait={wait}/>\n          </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}