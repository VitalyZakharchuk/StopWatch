{"ast":null,"code":"process.stdin.setRawMode(true);\nemitKeypressEvents(process.stdin);\nconst keypresses$ = fromEvent(process.stdin, 'keypress', (_, key) => key);\nconst pauser$ = keypresses$.pipe(tap(key => {\n  if (key && key.ctrl && key.name == 'c') {\n    process.exit(0);\n  }\n}), filter(key => key.name === 'p'), scan(acc => !acc, false));\nconst starter$ = of(false);\nconcat(starter$, pauser$).pipe(switchMap(stopped => stopped ? NEVER : timer(0, 1000)), scan(acc => acc + 1, 0)).subscribe(console.log);\nexport default App;","map":{"version":3,"sources":["D:/stopwatch/src/App.js"],"names":["process","stdin","setRawMode","emitKeypressEvents","keypresses$","fromEvent","_","key","pauser$","pipe","tap","ctrl","name","exit","filter","scan","acc","starter$","of","concat","switchMap","stopped","NEVER","timer","subscribe","console","log","App"],"mappings":"AAAAA,OAAO,CAACC,KAAR,CAAcC,UAAd,CAAyB,IAAzB;AACAC,kBAAkB,CAACH,OAAO,CAACC,KAAT,CAAlB;AAEA,MAAMG,WAAW,GAAGC,SAAS,CAACL,OAAO,CAACC,KAAT,EAAgB,UAAhB,EAA4B,CAACK,CAAD,EAAIC,GAAJ,KAAYA,GAAxC,CAA7B;AACA,MAAMC,OAAO,GAAGJ,WAAW,CAACK,IAAZ,CACdC,GAAG,CAACH,GAAG,IAAI;AACT,MAAIA,GAAG,IAAIA,GAAG,CAACI,IAAX,IAAmBJ,GAAG,CAACK,IAAJ,IAAY,GAAnC,EAAwC;AACtCZ,IAAAA,OAAO,CAACa,IAAR,CAAa,CAAb;AACD;AACF,CAJE,CADW,EAMdC,MAAM,CAACP,GAAG,IAAIA,GAAG,CAACK,IAAJ,KAAa,GAArB,CANQ,EAOdG,IAAI,CAACC,GAAG,IAAI,CAACA,GAAT,EAAc,KAAd,CAPU,CAAhB;AAUA,MAAMC,QAAQ,GAAGC,EAAE,CAAC,KAAD,CAAnB;AACAC,MAAM,CAACF,QAAD,EAAWT,OAAX,CAAN,CACGC,IADH,CAEIW,SAAS,CAACC,OAAO,IAAKA,OAAO,GAAGC,KAAH,GAAWC,KAAK,CAAC,CAAD,EAAI,IAAJ,CAApC,CAFb,EAGIR,IAAI,CAACC,GAAG,IAAIA,GAAG,GAAG,CAAd,EAAiB,CAAjB,CAHR,EAKGQ,SALH,CAKaC,OAAO,CAACC,GALrB;AAOA,eAAeC,GAAf","sourcesContent":["process.stdin.setRawMode(true);\nemitKeypressEvents(process.stdin);\n\nconst keypresses$ = fromEvent(process.stdin, 'keypress', (_, key) => key);\nconst pauser$ = keypresses$.pipe(\n  tap(key => {\n    if (key && key.ctrl && key.name == 'c') {\n      process.exit(0);\n    }\n  }),\n  filter(key => key.name === 'p'),\n  scan(acc => !acc, false),\n);\n\nconst starter$ = of(false);\nconcat(starter$, pauser$)\n  .pipe(\n    switchMap(stopped => (stopped ? NEVER : timer(0, 1000))),\n    scan(acc => acc + 1, 0),\n  )\n  .subscribe(console.log);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}